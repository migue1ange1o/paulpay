func checkLoggedIn(w http.ResponseWriter, r *http.Request) {
func checkLoggedInAdmin(w http.ResponseWriter, r *http.Request) bool {
func donationsHandler(w http.ResponseWriter, r *http.Request) {
func updateCryptosHandler(w http.ResponseWriter, r *http.Request) {
func logging(f http.HandlerFunc) http.HandlerFunc {
func replayDonoHandler(w http.ResponseWriter, r *http.Request) {
func getLoggedInUser(w http.ResponseWriter, r *http.Request) (utils.User, bool) {
func allUsersHandler(w http.ResponseWriter, r *http.Request) {
func generateCodesHandler(w http.ResponseWriter, r *http.Request) {
func viewDonosHandler(w http.ResponseWriter, r *http.Request) {
func toggleUserRegistrationsHandler(w http.ResponseWriter, r *http.Request) {
func loginHandler(w http.ResponseWriter, r *http.Request) {
func userOBSHandler(w http.ResponseWriter, r *http.Request) {
func userHandler(w http.ResponseWriter, r *http.Request) {
func updateLinksHandler(w http.ResponseWriter, r *http.Request) {
func changePasswordHandler(w http.ResponseWriter, r *http.Request) {
func changeUserMoneroHandler(w http.ResponseWriter, r *http.Request) {
func registerUserHandler(w http.ResponseWriter, r *http.Request) {
func changeUserHandler(w http.ResponseWriter, r *http.Request) {
func handleEthereumPayment(w http.ResponseWriter, s *utils.CryptoSuperChat, name_ string, message_ string, amount_ float64, showAmount_ bool, media_ string, fCrypto string, encrypted_ip string, USDAmount float64, userID int) {
func handleSolanaPayment(w http.ResponseWriter, s *utils.CryptoSuperChat, params url.Values, name_ string, message_ string, amount_ float64, showAmount_ bool, media_ string, encrypted_ip string, USDAmount float64, userID int) {
func handleMoneroPayment(w http.ResponseWriter, s *utils.CryptoSuperChat, params url.Values, amount float64, encrypted_ip string, showAmount bool, USDAmount float64, userID int) {
func renderChangePasswordForm(w http.ResponseWriter, data utils.UserPageData) {
func logoutHandler(w http.ResponseWriter, r *http.Request) {
func incorrectLoginHandler(w http.ResponseWriter, r *http.Request) {
func alertOBSHandler(w http.ResponseWriter, r *http.Request) {
func progressbarOBSHandler(w http.ResponseWriter, r *http.Request) {
func cryptoSettingsHandler(w http.ResponseWriter, r *http.Request) {
func errorHandler(w http.ResponseWriter, r *http.Request, header, subheader, message string) {
func tosHandler(w http.ResponseWriter, r *http.Request) {
func overflowHandler(w http.ResponseWriter, r *http.Request) {
func getIPAddress(r *http.Request) string {
func indexHandler(w http.ResponseWriter, r *http.Request) {
func newAccountHandler(w http.ResponseWriter, r *http.Request) {
func accountBillingHandler(w http.ResponseWriter, r *http.Request) {
func checkDonationStatusHandler(w http.ResponseWriter, r *http.Request) {
func refreshHandler(w http.ResponseWriter, r *http.Request) {
func setupRoutes() {


func main() {
func startWallets() {
func setServerVars() {
func createDatabaseIfNotExists(db *sql.DB) error {
func createObsTable(db *sql.DB) error {
 
func generateMoreInviteCodes(codeAmount int) {
func getAllCodes() map[string]utils.InviteCode {
func createNewInviteCode(value string, active bool) error {
func updateInviteCode(code utils.InviteCode) error {
func checkValidInviteCode(ic string) bool {

func mapToCryptosEnabled(selectedCryptos map[string]bool) utils.CryptosEnabled {

func clearRecentIPS(ip string) {
func CheckRecentIPRequests(ip string) int {
func encryptIP(ip string) string {
func clearEncryptedIP(dono *utils.Dono) {
func getUnfulfilledDonoIPs() ([]string, error) {

func checkValidSubscription(DateEnabled time.Time) bool {
func updateEnabledDate(userID int) error {

func getAllUsers() ([]utils.User, error) {
func getUserLinks(user utils.User) ([]utils.Link, error) {
func createNewUser(username, password string) error {
func createUser(user utils.User) int {
func updateUser(user utils.User) error {
func getUserByAlertURL(AlertURL string) (utils.User, error) {
func setMinDonos() {
 
func getAllBilling() ([]utils.BillingData, error) {
func checkBillingAccounts() {

func getActiveETHUsers(db *sql.DB) ([]*utils.User, error) {
func getActiveXMRUsers(db *sql.DB) ([]*utils.User, error) {
func getUserCryptosEnabled(user utils.User) (utils.User, error) {
func createTestDono(user_id int, name string, curr string, message string, amount string, usdAmount float64, media_url string) {
func replayDono(donation utils.Donation, userID int) {
func convertToFloat64(value string) float64 {
func extractVideoID(url string) string {
func setUserMinDonos(user utils.User) utils.User {
func fetchExchangeRates() {
func createNewEthDono(name string, message string, mediaURL string, amountNeeded float64, cryptoCode string, encrypted_ip string) utils.SuperChat {
func startMoneroWallet(portInt, userID int, user utils.User) {
func CheckMoneroPort(userID int) bool {
func stopMoneroWallet(user utils.User) {
func checkDonos() {
func getAdminETHAdd() string {
func renewUserSubscription(user utils.User) {
func checkPendingAccounts() {
func checkAccountBillings() {
func getUSDValue(as float64, c string) float64 {
func addDonoToDonoBar(as, c string, userID int) {
func formatMediaURL(media_url string) string {
func createNewQueueEntry(db *sql.DB, user_id int, address string, name string, message string, amount string, currency string, dono_usd float64, media_url string) error {
func isYouTubeLink(link string) (bool, int, string) {
func checkDonoForMediaUSDThreshold(media_url string, dono_usd float64) (bool, string) {
func createNewDono(user_id int, dono_address string, dono_name string, dono_message string, amount_to_send string, currencyType string, encrypted_ip string, anon_dono bool, dono_usd float64, media_url string) int64 {
func updatePendingDonos() {
func addToDonosMap(dono utils.Dono) {
func updateDonoInMap(updatedDono utils.Dono) {
func printDonoInfo(dono utils.Dono, secondsElapsedSinceLastCheck, secondsNeededToCheck float64) {
func printTransferInfo(t utils.Transfer) {
func checkUnfulfilledDonos() []utils.Dono {
func removeFulfilledDonos(donos []utils.Dono) {
func returnETHAddresses() []string {
func updateDonosInDB() {
func getXMRBalance(checkID string, userID int) (float64, error) {
func runDatabaseMigrations(db *sql.DB) error {
func updateColumnWalletUploadedIfNull(db *sql.DB, tableName, columnName string) error {
func updateColumnDateEnabledIfNull(db *sql.DB, tableName, columnName string) error {
func updateColumnAlertURLIfNull(db *sql.DB, tableName, columnName string) error {
func removeColumnIfExist(db *sql.DB, tableName, columnName string) error {
func addColumnIfNotExist(db *sql.DB, tableName, columnName, columnType string) error {
func checkDatabaseColumnExist(db *sql.DB, dbTable string, dbColumn string) bool {

   
func createNewOBS(db *sql.DB, userID int, message string, needed, sent float64, refresh int, gifFile, soundFile, ttsVoice string) {

func createAdminUser() {
func insertObsData(db *sql.DB, userId int, gifName, mp3Name, ttsVoice string, pbData utils.ProgressbarData) error {
func checkObsData(db *sql.DB) (bool, error) {
func updateObsData(db *sql.DB, userID int, gifName string, mp3Name string, ttsVoice string, pbData utils.ProgressbarData) error {
func getObsData(db *sql.DB, userId int) utils.OBSDataStruct {

   
func getOBSDataByAlertURL(AlertURL string) (utils.OBSDataStruct, error) {
func getOBSDataByUserID(userID int) (utils.OBSDataStruct, error) {
func getUserBySessionCached(sessionToken string) (utils.User, bool) {
func getUserByUsernameCached(username string) (utils.User, bool) {
func getUserByUsername(username string) (utils.User, error) {
func checkUserByID(id int) bool {
func printUserColumns() error {
func checkUserByUsername(username string) (bool, int) {
func getUserBySession(sessionToken string) (utils.User, error) {
func verifyPassword(user utils.User, password string) bool {

func saveFileToDisk(file multipart.File, header *multipart.FileHeader, path string) error {



func createSession(userID int) (string, error) {
func validateSession(r *http.Request) (int, error) {
func condenseSpaces(s string) string {
func truncateStrings(s string, n int) string {
func getUserPathByID(id int) string {
func checkFileExists(filePath string) bool {
func checkUserGIF(userpath string) bool {
func checkUserSound(userpath string) bool {
func checkUserMoneroWallet(userpath string) bool {
func checkUserMoneroWalletKeys(userpath string) bool {

    
func cryptosStructToJSONString(s utils.CryptosEnabled) string {
func cryptosJsonStringToStruct(jsonStr string) utils.CryptosEnabled {

   
func checkDonoQueue(db *sql.DB, userID int) (bool, error) {
func getRefreshFromUSDAmount(x float64, s string) int {
func returnIPPenalty(ips []string, currentDonoIP string) float64 {

func checkUsernamePendingOrCreated(username_ string) bool {
func getNewAccountETHPrice() string {
func getNewAccountXMRPrice() string {
func getXMRAmountInUSD(usdAmount float64) string {
func getETHAmountInUSD(usdAmount float64) string {
func getNewAccountXMR() (string, string) {
func createNewPendingUser(username string, password string) (utils.PendingUser, error) {
func createPendingUser(user utils.PendingUser) error {
func getNewUser(username string, hashedPassword []byte) utils.User {
func createNewUserFromPending(user_ utils.PendingUser) error {
func deletePendingUser(user utils.PendingUser) error {
func paymentHandler(w http.ResponseWriter, r *http.Request) {
func createNewSolDono(name string, message string, mediaURL string, amountNeeded float64, encrypted_ip string) utils.SuperChat {
func createNewXMRDono(name string, message string, mediaURL string, amountNeeded float64, encrypted_ip string) {
func isDonoFulfilled(donoID int) bool {
func ethToWei(ethStr string) *big.Int {
func getEthAddressByID(userID int) string {
func getSolAddressByID(userID int) string {
func getPortID(xmrWallets [][]int, userID int) int {
